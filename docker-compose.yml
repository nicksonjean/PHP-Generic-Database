x-php-base: &php-base
  build:
    context: .
  env_file:
    - .env.docker
  restart: unless-stopped
  depends_on:
    - mysql
    - postgres
    - sqlsrv
    - oracle
    - firebird
  working_dir: /var/www/html
  volumes:
    - .:/var/www/html
  networks:
    - internal
  logging:
    driver: "json-file"
    options:
      max-file: "5"
      max-size: "10m"

services:
  # adminer:
  #   image: adminer:latest
  #   container_name: adminer
  #   restart: always
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - internal

  # whodb:
  #   image: clidey/whodb:latest
  #   container_name: whodb
  #   restart: always
  #   ports:
  #     - 8080:8080
  #   networks:
  #     - internal

  app:
    <<: *php-base
    build:
      dockerfile: ./docker/php/Dockerfile
      args:
        PHP_VERSION: "${PHP_VERSION:-8.3}"
        PHP_PORT: "${PHP_PORT:-8300}"
    container_name: php${PHP_VERSION:-8.3}
    ports:
      - "${PHP_PORT:-8300}:80"

  mysql:
    image: mysql:latest
    container_name: mysql
    env_file:
      - .env.docker
    restart: unless-stopped
    ports:
      - "${MYSQL_PORT:-3306}:${MYSQL_PORT:-3306}"
    volumes:
      - /var/lib/mysql
    environment:
      MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_USER: ${MYSQL_USER:-root}
      MYSQL_ROOT_PASSWORD: ${MYSQL_PASSWORD:-masterkey}
    networks:
      - internal

  postgres:
    image: postgres:latest
    container_name: postgres
    env_file:
      - .env.docker
    restart: unless-stopped
    ports:
      - "${PGSQL_PORT:-5432}:${PGSQL_PORT:-5432}"
    volumes:
      - /var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${PGSQL_USER:-postgres}
      POSTGRES_PASSWORD: ${PGSQL_PASSWORD:-masterkey}
    networks:
      - internal

  sqlsrv:
    image: mcr.microsoft.com/mssql/server:latest
    container_name: sqlsrv
    env_file:
      - .env.docker
    restart: unless-stopped
    ports:
      - "${SQLSERVER_PORT:-1433}:${SQLSERVER_PORT:-1433}"
    volumes:
      - /var/opt/mssql/
      - /var/opt/sqlserver/data
      - /var/opt/sqlserver/log
      - /var/opt/sqlserver/backup
    environment:
      ACCEPT_EULA: "Y"
      SA_USER: ${SQLSERVER_USER:-sa}
      SA_PASSWORD: ${SQLSERVER_PASSWORD:-20Z£?2@Z§!}
      MSSQL_PID: Express
    networks:
      - internal

  oracle:
    image: gvenzl/oracle-free:latest
    container_name: oracle
    env_file:
      - .env.docker
    restart: unless-stopped
    ports:
      - "${OCI_PORT:-1521}:${OCI_PORT:-1521}"
    volumes:
      - /opt/oracle/oradata
      - /opt/oracle/backup
    environment:
      ORACLE_ALLOW_REMOTE: true
      ORACLE_RANDOM_PASSWORD: true
      APP_USER: ${OCI_USER:-hr}
      APP_USER_PASSWORD: ${OCI_PASSWORD:-masterkey}
    networks:
      - internal

  firebird:
    image: jacobalberty/firebird:3.0.7
    container_name: firebird
    env_file:
      - .env.docker
    restart: unless-stopped
    ports:
      - ${FBIRD_PORT:-3050}:${FBIRD_PORT:-3050}
    volumes:
      - ./resources/database/firebird:/firebird:rw
      - ./resources/database/firebird/config/firebird.conf:/firebird/etc/firebird.conf:ro
    environment:
      FIREBIRD_USER: ${FBIRD_USER:-sysdba}
      FIREBIRD_PASSWORD: ${FBIRD_PASSWORD:-masterkey}
      FIREBIRD_ROOT_PASSWORD: ${FBIRD_PASSWORD:-masterkey}
      ISC_USER: ${FBIRD_USER:-sysdba}
      ISC_PASSWORD: "${FBIRD_PASSWORD:-masterkey}"
      EnableLegacyClientAuth: true
    entrypoint: [ "/usr/local/firebird/bin/fbguard" ]
    networks:
      - internal

networks:
  internal:
    name: internal
    external: false
    driver: bridge
