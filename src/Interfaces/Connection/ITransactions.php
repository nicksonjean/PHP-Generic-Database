<?php

namespace GenericDatabase\Interfaces\Connection;

/**
 * This interface defines the contract for transaction management in a database connection.
 * Implementing classes should provide methods to handle database transactions,
 * such as beginning, committing, and rolling back transactions.
 *
 * @package PHP-Generic-Database\Interfaces\Connection
 * @subpackage ITransactions
 */
interface ITransactions
{
    /**
     * This function creates a new transaction, in order to be able to commit or rollback changes made to the database.
     *
     * @return bool
     */
    public function beginTransaction(): bool;

    /**
     * This function commits any changes made to the database during this transaction.
     *
     * @return bool
     */
    public function commit(): bool;

    /**
     * This function rolls back any changes made to the database during
     * this transaction and restores the data to its original state.
     *
     * @return bool
     */
    public function rollback(): bool;

    /**
     * This function returns the last ID generated by an auto-increment column,
     * either the last one inserted during the current transaction, or by passing in the optional name parameter.
     *
     * @return bool
     */
    public function inTransaction(): bool;
}
