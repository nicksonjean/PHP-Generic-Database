<?php

namespace GenericDatabase\Engine;

use
  GenericDatabase\Traits\Errors,
  GenericDatabase\Traits\Caller,
  GenericDatabase\Traits\Cleaner,
  GenericDatabase\Traits\Singleton,
  GenericDatabase\Engine\PgSQL\Arguments,
  GenericDatabase\Engine\PgSQL\Options,
  GenericDatabase\Engine\PgSQL\Attributes,
  GenericDatabase\Engine\PgSQL\DSN,
  GenericDatabase\Engine\PgSQL\PgSQL,
  GenericDatabase\Engine\PgSQL\Dump,
  GenericDatabase\Engine\PgSQL\Transaction;

class PgSQLEngine
{
  use Errors, Caller, Cleaner, Singleton;

  /**
   * This method is responsible for call the static instance to Arguments class with a Magic Method __call and __callStatic.
   * 
   * @param string $method
   * @param array $arguments
   * @return PgSQLEngine
   */
  private static function call(string $method, array $arguments): PgSQLEngine
  {
    return Arguments::call($method, $arguments);
  }

  /**
   * This method is responsible for prepare the connection options before connect.
   * 
   * @return PgSQLEngine
   */
  private function preConnect(): PgSQLEngine
  {
    Options::setOptions($this->getOptions());
    $options = [];
    $options = Options::getOptions();
    $this->setOptions($options);
    return $this;
  }

  /**
   * This method is responsible for update in date late binding the connection.
   * 
   * @return PgSQLEngine
   */
  private function postConnect(): PgSQLEngine
  {
    Options::define();
    Attributes::define();
    return $this;
  }

  /**
   * This method is responsible for creating a new instance of the PgSQLEngine connection.
   * 
   * @param string $dsn
   * @return PgSQLEngine 
   */
  private function realConnect(string $dsn): PgSQLEngine
  {
    $this->setConnection((string) !Options::getOptions(PgSQL::ATTR_PERSISTENT) ? pg_connect($dsn, Attributes::getFlags()) : pg_pconnect($dsn, Attributes::getFlags()));
    return $this;
  }

  /**
   * This method is used to establish a database connection and set the connection instance
   * 
   * @return PgSQLEngine
   */
  public function connect(): PgSQLEngine
  {
    try {
      $this
        ->preConnect()
        ->setInstance($this)
        ->realConnect($this->parseDns())
        ->postConnect()
        ->setConnected(true);
      return $this;
    } catch (\Exception $error) {
      $this->setConnected(false);
      Errors::throw($error);
    }
  }

  /**
   * This method is responsible for parsing the DSN from DSN class.
   * 
   * @return string|\Exception
   */
  private function parseDns(): string|\Exception
  {
    return DSN::parseDns();
  }

  /**
   * This method is used to get the database connection instance
   * 
   * @return \PgSql\Connection
   */
  public function getConnection(): \PgSql\Connection
  {
    return $GLOBALS['connection'];
  }

  /**
   * This method is used to assign the database connection instance
   * 
   * @param \PgSql\Connection $connection
   * @return \PgSql\Connection
   */
  public function setConnection(\PgSql\Connection $connection): \PgSql\Connection
  {
    return $GLOBALS['connection'] = $connection;
  }

  /**
   * Import SQL dump from file - extremely fast.
   * 
   * @param string $file 
   * @param string $delimiter = ';'
   * @param array<callable(int, ?float): void> $onProgress = null
   * @return int
   */
  public function loadFromFile(string $file, string $delimiter = ';', ?callable $onProgress = null): int
  {
    return Dump::loadFromFile($file, $delimiter, $onProgress);
  }

  /**
   * This function creates a new transaction, in order to be able to commit or rollback changes made to the database.
   * 
   * @return bool
   */
  public function beginTransaction(): bool
  {
    return Transaction::beginTransaction();
  }

  /**
   * This function commits any changes made to the database during this transaction.
   * 
   * @return bool
   */
  public function commit(): bool
  {
    return Transaction::commit();
  }

  /**
   * This function rolls back any changes made to the database during this transaction and restores the data to its original state.
   * 
   * @return bool
   */
  public function rollback(): bool
  {
    return Transaction::rollback();
  }

  /**
   * This function returns the last ID generated by an auto-increment column, either the last one inserted during the current transaction, or by passing in the optional name parameter.
   * 
   * @return bool
   */
  public function inTransaction(): bool
  {
    return Transaction::inTransaction();
  }

  /**
   * This function returns the last ID generated by an auto-increment column, either the last one inserted during the current transaction, or by passing in the optional name parameter.
   * 
   * @param ?string $name = null
   * @return string|false
   */
  public function lastInsertId(?string $name = null): string | false
  {
    $autoKey = $this->query(vsprintf("SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE column_default LIKE 'nextval%%' AND table_name = '%s';", [$name]));
    $autoKeyRes = pg_fetch_assoc($autoKey);
    if (isset($autoKeyRes['column_name'])) {
      $maxIndex = $this->query(vsprintf("SELECT pg_catalog.setval(pg_get_serial_sequence('%s', '%s'), COALESCE(MAX(%s))) AS value FROM %s;", [$name, $autoKeyRes['column_name'], $autoKeyRes['column_name'], $name]));
      $maxIndexRes = pg_fetch_assoc($maxIndex);
      return $maxIndexRes['value'];
    } else {
      return 0;
    }
  }

  /**
   * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
   * 
   * @param mixed $string
   * @param ?bool $quote = false
   * @return string|array|false
   */
  public function quote(mixed $string, ?bool $quote = false): string | array | false
  {
    if (is_array($string))
      return array_map([get_called_class(), 'quote'], $string, array_fill(0, count($string), $quote));
    elseif ($string && preg_match("/^(?:\d+\.\d+|[1-9]\d*)$/S", $string))
      return $string;

    $quoted = function ($string, $quote) {
      $val = pg_escape_string($this->getInstance()->getConnection(), $string);
      return ($quote) ? "'$val'" : $val;
    };
    return $quoted($string, $quote);
  }

  /**
   * This function prepares an SQL statement for execution and returns a statement object.
   * 
   * @param string $stmtname
   * @param string $query
   * @return \PgSql\Result|false
   */
  public function prepare(string $stmtname, string $query): \PgSql\Result|false
  {
    return pg_prepare($this->getInstance()->getConnection(), $stmtname, $query);
  }

  /**
   * This function executes an SQL statement and returns the result set as a statement object.
   * 
   * @param string $query
   * @return object|false
   */
  public function query(string $query): \PgSql\Result|false
  {
    return pg_query($this->getInstance()->getConnection(), $query);
  }

  /**
   * This function runs an SQL statement and returns the number of affected rows.
   * 
   * @param string $statement
   * @param array $paramss
   * @return \PgSql\Result|false
   */
  public function exec(string $stmtname, array $params): \PgSql\Result|false
  {
    return pg_execute($this->getInstance()->getConnection(), $stmtname, $params);
  }

  /**
   * This function retrieves an attribute from the database.
   * 
   * @param int $attribute
   * @return mixed
   */
  public function getAttribute($name)
  {
    return PgSQL::getAttribute($name);
  }

  /**
   * This function returns an array containing error information about the last operation performed by the database.
   * 
   * @return string
   */
  public function setAttribute($name, $value)
  {
    return PgSQL::setAttribute($name, $value);
  }

  /**
   * This function returns an SQLSTATE code for the last operation executed by the database.
   * 
   * @return int
   */
  public function errorCode(): int
  {
    return pg_last_error($this->getInstance()->getConnection());
  }

  /**
   * This function returns an array containing error information about the last operation performed by the database.
   * 
   * @return string
   */
  public function errorInfo(): string
  {
    return pg_last_error($this->getInstance()->getConnection());
  }
}
