<?php

namespace GenericDatabase;

interface iConnection
{

  /**
   * This method is used to establish a database connection and set the connection instance
   * 
   * @return iConnection
   */
  public function connect(): iConnection;

  /**
   * This method is used to get the database connection instance
   * 
   * @return mixed
   */
  public function getConnection(): mixed;

  /**
   * This method is used to assign the database connection instance
   * 
   * @param mixed $connection
   * @return mixed
   */
  public function setConnection(mixed $connection): mixed;

  /**
   * Import SQL dump from file - extremely fast.
   * 
   * @param string $file 
   * @param string $delimiter = ';'
   * @param array<callable(int, ?float): void> $onProgress = null
   * @return int
   */
  public function loadFromFile(string $file, string $delimiter = ';', ?callable $onProgress = null);

  /**
   * This function creates a new transaction, in order to be able to commit or rollback changes made to the database.
   * 
   * @return bool
   */
  public function beginTransaction();

  /**
   * This function commits any changes made to the database during this transaction.
   * 
   * @return bool
   */
  public function commit();

  /**
   * This function rolls back any changes made to the database during this transaction and restores the data to its original state.
   * 
   * @return bool
   */
  public function rollback();

  /**
   * This function returns the last ID generated by an auto-increment column, either the last one inserted during the current transaction, or by passing in the optional name parameter.
   * 
   * @return bool
   */
  public function inTransaction();

  /**
   * This function returns the last ID generated by an auto-increment column, either the last one inserted during the current transaction, or by passing in the optional name parameter.
   * 
   * @param ?string $name = null
   * @return string|int|false
   */
  public function lastInsertId(?string $name = null): string|int|false;

  /**
   * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
   * 
   * @param mixed $params
   * @return mixed
   */
  public function quote(mixed ...$params): mixed;

  /**
   * This function prepares an SQL statement for execution and returns a statement object.
   * 
   * @param mixed $params
   * @return mixed
   */
  public function prepare(mixed ...$params): mixed;

  /**
   * This function executes an SQL statement and returns the result set as a statement object.
   * 
   * @param mixed $params
   * @return mixed
   */
  public function query(mixed ...$params): mixed;

  /**
   * This function runs an SQL statement and returns the number of affected rows.
   * 
   * @param mixed $params
   * @return mixed
   */
  public function exec(mixed ...$params): mixed;

  /**
   * This function retrieves an attribute from the database.
   * 
   * @param int $attribute
   * @return mixed
   */
  public function getAttribute(int $attribute);

  /**
   * This function returns an array containing error information about the last operation performed by the database.
   * 
   * @return string
   */
  public function setAttribute(int $attribute, string $value);

  /**
   * This function returns an SQLSTATE code for the last operation executed by the database.
   * 
   * @param ?int $inst = null
   * @return int
   */
  public function errorCode(?int $inst = null): mixed;

  /**
   * This function returns an array containing error information about the last operation performed by the database.
   * 
   * @param ?int $inst = null
   * @return string
   */
  public function errorInfo(?int $inst = null): mixed;
}
