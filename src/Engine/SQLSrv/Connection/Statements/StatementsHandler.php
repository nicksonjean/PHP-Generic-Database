<?php

namespace GenericDatabase\Engine\SQLSrv\Connection\Statements;

use GenericDatabase\Interfaces\IConnection;
use GenericDatabase\Interfaces\Statements\IStatements;
use GenericDatabase\Abstract\Statements\AbstractStatements;
use GenericDatabase\Helpers\Schemas;
use GenericDatabase\Helpers\Parsers\SQL;
use GenericDatabase\Helpers\Validations;

/**
 * Concrete implementation for SQLSrv database
 */
class StatementsHandler extends AbstractStatements implements IStatements
{
    /**
     * This function returns the last ID generated by an auto-increment column,
     * either the last one inserted during the current transaction, or by passing in the optional name parameter.
     *
     * @param ?string $name = null Resource name, table or view
     * @return string|int|false
     */
    public function lastInsertId(?string $name = null): string|int|false
    {
        if (!$name) {
            $query = "SELECT CAST(@@IDENTITY AS BIGINT) AS LastInsertedID";
            $statement = sqlsrv_query($this->getInstance()->getConnection(), $query);
            if ($statement) {
                $row = sqlsrv_fetch_array($statement, SQLSRV_FETCH_ASSOC);
                sqlsrv_free_stmt($statement);
                return $row ? (int) $row['LastInsertedID'] : 0;
            }
            return 0;
        }
        $filter = "WHERE TABLE_NAME = ? AND TABLE_SCHEMA = SCHEMA_NAME() AND COLUMNPROPERTY(OBJECT_ID(TABLE_SCHEMA + '.' + TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1";
        $query = sprintf("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS %s", $filter);
        $statement = sqlsrv_query($this->getInstance()->getConnection(), $query, [$name]);
        if ($statement) {
            $row = sqlsrv_fetch_array($statement, SQLSRV_FETCH_ASSOC);
            sqlsrv_free_stmt($statement);
            if (isset($row['COLUMN_NAME'])) {
                $identityColumn = $row['COLUMN_NAME'];
                $query = sprintf("SELECT MAX(%s) AS LastInsertedID FROM %s", $identityColumn, $name);
                $statement = sqlsrv_query($this->getInstance()->getConnection(), $query);
                if ($statement) {
                    $result = sqlsrv_fetch_array($statement, SQLSRV_FETCH_ASSOC);
                    sqlsrv_free_stmt($statement);
                    return $result ? (int) $result['LastInsertedID'] : 0;
                }
            }
        }
        return false;
    }

    /**
     * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
     *
     * @param mixed $params Content to be quoted
     * @return mixed
     */
    public function quote(mixed ...$params): mixed
    {
        $string = reset($params);
        return match (true) {
            is_int($string) => $string,
            is_float($string) => "'" . str_replace(',', '.', strval($string)) . "'",
            is_bool($string) => $string ? '1' : '0',
            is_null($string) => 'NULL',
            default => "'" . str_replace("'", "''", (string) $string) . "'",
        };
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param mixed $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    public function bindParam(object $params): void
    {
        $this->setQueryColumns((int) is_resource($params->statement->object) ? sqlsrv_num_fields($params->statement->object) : 0);
        $this->setQueryParameters($params->query->arguments);
        if ($params->by->array) {
            $this->internalBindParamArray($params);
        } else {
            $this->internalBindParamArgs($params);
        }
    }

    /**
     * Binds an array parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArray(object $params): void
    {
        if ($params->is->array->multi) {
            $this->internalBindParamArrayMulti($params);
        } else {
            $this->internalBindParamArraySingle($params);
        }
    }

    /**
     * Binds an array multiple parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArrayMulti(object $params): void
    {
        $affectedRows = 0;
        foreach ($params->query->arguments as $param) {
            $this->internalBindVariable($param);
            if ($this->exec($params->statement->object, array_values($param))) {
                if ($this->getQueryColumns() === 0) {
                    $affectedRows++;
                    $this->setAffectedRows((int) $affectedRows);
                }
            }
        }
    }

    /**
     * Binds an array single parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArraySingle(object $params): void
    {
        $this->internalBindParamArgs($params);
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an args of parameters and values.
     * @return void
     */
    private function internalBindParamArgs(object $params): void
    {
        $this->internalBindVariable($params->query->arguments);
        if ($this->exec($params->statement->object)) {
            if ((int) $this->getQueryColumns() > 0) {
                $this->setQueryRows(
                    (function (mixed $stmt): int {
                        $results = [];
                        $rows = 0;
                        while ($row = sqlsrv_fetch_array($stmt, SQLSRV_FETCH_ASSOC)) {
                            $results[] = $row;
                            $rows++;
                        }
                        $this->setStatement(['results' => $results]);
                        return $rows;
                    })($params->statement->object) ?? 0
                );
            } else {
                $this->setAffectedRows((int) sqlsrv_rows_affected($params->statement->object));
            }
        }
    }

    /**
     * Binds variables to a prepared statement with specified types.
     * This method binds variables to a prepared statement based on their types,
     * allowing for more precise parameter binding.
     *
     * @param mixed $preparedParams The prepared statement to bind variables to.
     * @return mixed The prepared statement with bound variables.
     */
    private function internalBindVariable(mixed $preparedParams): mixed
    {
        return Validations::detectTypes($preparedParams);
    }

    /**
     * Parses an SQL statement and returns an statement.
     *
     * @param mixed ...$params The parameters for the query function.
     * @return string The statement resulting from the SQL statement.
     */
    public function parse(mixed ...$params): string
    {
        $this->setQueryString(SQL::binding(SQL::escape(reset($params), SQL::SQL_DIALECT_DOUBLE_QUOTE)));
        return $this->getQueryString();
    }

    /**
     * This function binds the parameters to a prepared statement.
     *
     * @param mixed ...$params
     * @return mixed
     */
    private function prepareStatement(mixed ...$params): mixed
    {
        $this->setAllMetadata();
        if (!empty($params)) {
            $bindParams = Schemas::makeArgs([null, ...$params]);
            if ($bindParams->by->array) {
                foreach (($bindParams->is->array->multi ? $bindParams->query->arguments : [$bindParams->query->arguments]) as $bindParam) {
                    $statement = sqlsrv_query($this->getInstance()->getConnection(), $this->parse(...$params), array_values($bindParam), ['Scrollable' => SQLSRV_CURSOR_FORWARD]);
                }
            } else {
                $statement = sqlsrv_query($this->getInstance()->getConnection(), $this->parse(...$params));
            }
            if ($statement) {
                $this->setStatement($statement);
            }
            return $statement;
        }
        return false;
    }

    /**
     * This function executes an SQL statement and returns the result set as a statement object.
     *
     * @param mixed $params Statement to be queried
     * @return IConnection
     */
    public function query(mixed ...$params): IConnection
    {
        if (!empty($params) && ($statement = $this->prepareStatement(...$params)) && $this->exec($statement)) {
            $colCount = is_resource($statement) ? sqlsrv_num_fields($statement) : 0;
            if ($colCount > 0) {
                $this->setQueryColumns($colCount);
                $this->setQueryRows(
                    (function (mixed $stmt): int {
                        $results = [];
                        $rows = 0;
                        while ($row = sqlsrv_fetch_array($stmt, SQLSRV_FETCH_ASSOC)) {
                            $results[] = $row;
                            $rows++;
                        }
                        $this->setStatement(['results' => $results, 'statement' => $stmt]);
                        return $rows;
                    })($statement) ?? 0
                );
            } else {
                $this->setAffectedRows(sqlsrv_rows_affected($statement));
                $this->setStatement(['results' => []]);
            }
        }
        return $this->getInstance();
    }

    /**
     * This function binds the parameters to a prepared query.
     *
     * @param mixed ...$params
     * @return IConnection
     */
    public function prepare(mixed ...$params): IConnection
    {
        if (!empty($params) && ($this->prepareStatement(...$params))) {
            $bindParams = Schemas::makeArgs([$this->getStatement(), ...$params]);
            $this->bindParam($bindParams);
        }
        return $this->getInstance();
    }

    /**
     * This function runs an SQL statement and returns the number of affected rows.
     *
     * @param mixed $params Statement to be executed
     * @return mixed
     */
    public function exec(mixed ...$params): mixed
    {
        $statement = reset($params) ?? $this->getStatement();
        sqlsrv_execute($statement);
        $this->setStatement($statement);
        return $this->getStatement();
    }
}
