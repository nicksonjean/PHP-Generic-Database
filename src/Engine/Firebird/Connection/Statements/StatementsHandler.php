<?php

namespace GenericDatabase\Engine\Firebird\Connection\Statements;

use GenericDatabase\Interfaces\IConnection;
use GenericDatabase\Interfaces\Connection\IStatements;
use GenericDatabase\Abstract\AbstractStatements;
use GenericDatabase\Core\Query;
use GenericDatabase\Helpers\Schemas;
use GenericDatabase\Helpers\Parsers\SQL;
use GenericDatabase\Helpers\Validations;

/**
 * Concrete implementation for Firebird database
 */
class StatementsHandler extends AbstractStatements implements IStatements
{
    /**
     * This function returns the last ID generated by an auto-increment column,
     * either the last one inserted during the current transaction, or by passing in the optional name parameter.
     *
     * @param ?string $name = null Resource name, table or view
     * @return string|int|false
     */
    public function lastInsertId(?string $name = null): string|int|false
    {
        if (!$name) {
            return 0;
        }
        $filter = 'WHERE RDB$RELATION_NAME = ? AND RDB$IDENTITY_TYPE = 1';
        $query = sprintf('SELECT RDB$FIELD_NAME, RDB$GENERATOR_NAME FROM RDB$RELATION_FIELDS %s', $filter);
        $stmt = ibase_prepare($this->getInstance()->getConnection(), $query);
        $result = ibase_execute($stmt, $name);
        if (!$result) {
            return false;
        }
        $row = ibase_fetch_assoc($result);
        if (isset($row['RDB$GENERATOR_NAME'])) {
            $identityColumn = $row['RDB$GENERATOR_NAME'];
            $query = sprintf('SELECT GEN_ID(%s, 0) AS LASTINSERTEDID FROM RDB$DATABASE', $identityColumn);
            $stmt = ibase_query($this->getInstance()->getConnection(), $query);
            if (!$stmt) {
                return false;
            }
            $result = ibase_fetch_assoc($stmt);
            if ($result) {
                return (int) $result['LASTINSERTEDID'];
            }
        }
        return false;
    }

    /**
     * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
     *
     * @param mixed $params Content to be quoted
     * @return mixed
     */
    public function quote(mixed ...$params): mixed
    {
        $string = reset($params);
        return match (true) {
            is_int($string) => $string,
            is_float($string) => "'" . str_replace(',', '.', strval($string)) . "'",
            is_bool($string) => $string ? '1' : '0',
            is_null($string) => 'NULL',
            default => "'" . str_replace("'", "''", (string) $string) . "'",
        };
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    public function bindParam(object $params): void
    {
        $this->setQueryParameters($params->query->arguments);
        if ($params->by->array) {
            $this->internalBindParamArray($params);
        } else {
            $this->internalBindParamArgs($params);
        }
    }

    /**
     * Binds an array parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArray(object $params): void
    {
        if ($params->is->array->multi) {
            $this->internalBindParamArrayMulti($params);
        } else {
            $this->internalBindParamArraySingle($params);
        }
    }

    /**
     * Binds an array multiple parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArrayMulti(object $params): void
    {
        $affectedRows = 0;
        foreach ($params->query->arguments as $argument) {
            $this->internalBindVariable($argument);
            if ($this->exec($params->statement->object, array_values($argument))) {
                if ($this->getQueryColumns() === 0) {
                    $affectedRows++;
                    $this->setAffectedRows((int) $affectedRows);
                }
            }
        }
    }

    /**
     * Binds an array single parameter to a variable in the SQL statement.
     *
     * @param mixed $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArraySingle(object $params): void
    {
        $this->internalBindParamArgs($params);
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an args of parameters and values.
     * @return void
     */
    private function internalBindParamArgs(object $params): void
    {
        $this->internalBindVariable($params->query->arguments);
        if ($stmt = $this->exec($params->statement->object, array_values($params->query->arguments))) {
            $this->setStatement($stmt);
            $colCount = is_resource($params->statement->object) ? ibase_num_fields($params->statement->object) : 0;
            if ($colCount > 0) {
                $this->setQueryColumns((int) $colCount);
                $rowCount = 0;
                $rows = [];
                while ($line = ibase_fetch_assoc($stmt)) {
                    $rowCount++;
                    $rows[] = $line;
                }
                $this->setQueryRows($rowCount);
                $this->setStatement(['results' => $rows]);
            } else {
                $this->setStatement(['results' => []]);
                $this->setAffectedRows((int) ibase_affected_rows($this->getInstance()->getConnection()));
            }
        }
    }

    /**
     * Binds variables to a prepared statement with specified types.
     * This method binds variables to a prepared statement based on their types,
     * allowing for more precise parameter binding.
     *
     * @param mixed $data The prepared statement to bind variables to.
     * @return mixed The prepared statement with bound variables.
     */
    private function internalBindVariable(mixed $data): mixed
    {
        return Validations::detectTypes($data);
    }

    /**
     * Parses an SQL statement and returns an statement.
     *
     * @param mixed ...$params The parameters for the query function.
     * @return string The statement resulting from the SQL statement.
     */
    public function parse(mixed ...$params): string
    {
        $this->setQueryString(SQL::binding(SQL::escape(reset($params), SQL::SQL_DIALECT_DOUBLE_QUOTE)));
        return $this->getQueryString();
    }

    /**
     * This function binds the parameters to a prepared statement.
     *
     * @param mixed ...$params
     * @return mixed
     */
    private function prepareStatement(mixed ...$params): mixed
    {
        $this->setAllMetadata();
        if (!empty($params)) {
            $statement = call_user_func_array((reset($params)[1] === Query::RAW) ? 'ibase_query' : 'ibase_prepare', [$this->getInstance()->getConnection(), $this->parse(reset($params)[0])]);
            if ($statement) {
                $this->setStatement($statement);
            }
            return $statement;
        }
        return false;
    }

    /**
     * This function executes an SQL statement and returns the result set as a statement object.
     *
     * @param mixed $params Statement to be queried
     * @return IConnection
     */
    public function query(mixed ...$params): IConnection
    {
        if (!empty($params) && ($statement = $this->prepareStatement([...$params, Query::RAW]))) {
            $colCount = is_resource($statement) ? ibase_num_fields($statement) : 0;
            if ($colCount > 0) {
                $cloneStmt = function () use ($statement, $params): mixed {
                    if (!is_resource($statement)) {
                        return false;
                    }
                    return $this->prepareStatement([...$params, Query::RAW]);
                };
                $countStmt = $cloneStmt();
                if ($countStmt) {
                    $rowCount = 0;
                    while (ibase_fetch_row($countStmt)) {
                        $rowCount++;
                    }
                    $this->setQueryRows($rowCount);
                }
                $this->setQueryColumns($colCount);
                $this->setStatement($statement);
            } else {
                $this->setStatement(['results' => []]);
                $this->setAffectedRows(ibase_affected_rows($this->getInstance()->getConnection()));
            }
        }
        return $this->getInstance();
    }

    /**
     * This function binds the parameters to a prepared query.
     *
     * @param mixed ...$params
     * @return IConnection
     */
    public function prepare(mixed ...$params): IConnection
    {
        if (!empty($params) && ($this->prepareStatement([...$params, Query::PREPARED]))) {
            $bindParams = Schemas::makeArgs([$this->getStatement(), ...$params]);
            $this->bindParam($bindParams);
        }
        return $this->getInstance();
    }

    /**
     * This function runs an SQL statement and returns the number of affected rows.
     *
     * @param mixed $params Statement to be executed
     * @return mixed
     */
    public function exec(mixed ...$params): mixed
    {
        $statement = reset($params);
        $data = $params[1] ?? false;
        if (!is_array($data)) {
            $data = [];
        }
        $data = $this->internalBindVariable($data);
        array_unshift($data, $statement);
        return call_user_func_array('ibase_execute', $data);
    }
}
