<?php

namespace GenericDatabase\Engine\Firebird\Connection\Transactions;

use ErrorException;
use GenericDatabase\Interfaces\IConnection;
use GenericDatabase\Interfaces\Connection\ITransactions;

class TransactionsHandler implements ITransactions
{
    protected static int $transactionCounter = 0;

    protected static bool $inTransaction = false;

    protected static IConnection $instance;

    public function __construct(IConnection $instance)
    {
        self::$instance = $instance;
    }

    public function getInstance(): IConnection
    {
        return self::$instance;
    }

    /**
     * This function creates a new transaction, in order to be able to commit or rollback changes made to the database.
     *
     * @return bool
     * @throws ErrorException
     */
    public function beginTransaction(): bool
    {
        set_error_handler(function ($severity, $message, $file, $line) {
            throw new ErrorException($message, 0, $severity, $file, $line);
        });
        if (!self::$transactionCounter++) {
            self::$inTransaction = true;
            /** @var resource|object|false $transaction */
            $transaction = ibase_trans(IBASE_DEFAULT, $this->getInstance()->getConnection());
            if ($transaction !== false) {
                return true;
            }
            self::$transactionCounter--;
            return false;
        }
        $result = ibase_query($this->getInstance()->getConnection(), 'SAVEPOINT trans' . (self::$transactionCounter));
        return $result !== false && self::$transactionCounter >= 0;
    }

    /**
     * This function commits any changes made to the database during this transaction.
     *
     * @return bool
     */
    public function commit(): bool
    {
        restore_error_handler();
        if (!--self::$transactionCounter) {
            self::$inTransaction = false;
            return ibase_commit($this->getInstance()->getConnection());
        }
        return self::$transactionCounter >= 0;
    }

    /**
     * This function returns the last ID generated by an auto-increment column,
     * either the last one inserted during the current transaction, or by passing in the optional name parameter.
     *
     * @return bool
     */
    public function inTransaction(): bool
    {
        return self::$inTransaction;
    }

    /**
     * This function rolls back any changes made to the database during
     * this transaction and restores the data to its original state.
     *
     * @return bool
     */
    public function rollback(): bool
    {
        if (--self::$transactionCounter) {
            ibase_query(
                $this->getInstance()->getConnection(),
                'ROLLBACK TO trans' . (self::$transactionCounter + 1)
            );
            self::$inTransaction = false;
            return true;
        }
        return ibase_rollback($this->getInstance()->getConnection());
    }
}
