<?php

namespace GenericDatabase\Engine\SQLite\Connection\Statements;

use GenericDatabase\Interfaces\IConnection;
use GenericDatabase\Interfaces\Connection\IStatements;
use GenericDatabase\Abstract\AbstractStatements;
use GenericDatabase\Helpers\Schemas;
use GenericDatabase\Helpers\Parsers\SQL;
use SQLite3Result;

/**
 * Concrete implementation for SQLite database

 */
class StatementsHandler extends AbstractStatements implements IStatements
{
    /**
     * This function returns the last ID generated by an auto-increment column,
     * either the last one inserted during the current transaction, or by passing in the optional name parameter.
     *
     * @param ?string $name = null Resource name, table or view
     * @return string|int|false
     */
    public function lastInsertId(?string $name = null): string|int|false
    {
        if (!$name) {
            return $this->getInstance()->getConnection()->lastInsertRowID();
        }
        $query = "SELECT seq FROM sqlite_sequence WHERE name = :name";
        $stmt = $this->getInstance()->getConnection()->prepare($query);
        if (!$stmt) {
            return false;
        }
        $stmt->bindValue(':name', $name, SQLITE3_TEXT);
        $result = $stmt->execute();
        if (!$result) {
            return false;
        }
        $row = $result->fetchArray(SQLITE3_ASSOC);
        return $row ? (int) $row['seq'] : false;
    }

    /**
     * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
     *
     * @param mixed $params Content to be quoted
     * @return mixed
     */
    public function quote(mixed ...$params): mixed
    {
        $string = reset($params);
        return match (true) {
            is_int($string) => $string,
            is_float($string) => "'" . str_replace(',', '.', strval($string)) . "'",
            is_bool($string) => $string ? '1' : '0',
            is_null($string) => 'NULL',
            default => "'" . str_replace("'", "''", (string) $string) . "'",
        };
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param mixed $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    public function bindParam(object $params): void
    {
        $this->setQueryParameters($params->query->arguments);
        if ($params->by->array) {
            $this->internalBindParamArray($params);
        } else {
            $this->internalBindParamArgs($params);
        }
    }

    /**
     * Binds an array parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArray(object $params): void
    {
        if ($params->is->array->multi) {
            $this->internalBindParamArrayMulti($params);
        } else {
            $this->internalBindParamArraySingle($params);
        }
    }

    /**
     * Binds an array multiple parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArrayMulti(object $params): void
    {
        $affectedRows = 0;
        foreach ($params->query->arguments as $argument) {
            $this->setStatement($this->internalBindVariable($argument, $params->statement->object));
            if ($this->exec($this->getStatement())) {
                if ($this->getQueryColumns() === 0) {
                    $affectedRows++;
                    $this->setAffectedRows((int) $affectedRows);
                }
            }
        }
    }

    /**
     * Binds an array single parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArraySingle(object $params): void
    {
        $this->internalBindParamArgs($params);
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an args of parameters and values.
     * @return void
     */
    private function internalBindParamArgs(object $params): void
    {
        $this->setStatement(@$this->internalBindVariable($params->query->arguments, $params->statement->object));
        if ($result = $this->exec($this->getStatement())) {
            $colCount = (is_object($result) && get_class($result) === 'SQLite3Result' && method_exists($result, 'numColumns')) ? $result->numColumns() : 0;
            $this->setQueryColumns((int) $colCount);
            if ((int) $colCount > 0) {
                $this->setQueryRows(
                    (function (mixed $result): int {
                        $rows = 0;
                        while ($result->fetchArray(SQLITE3_ASSOC)) {
                            $rows++;
                        }
                        return $rows;
                    })($result) ?? 0
                );
            } else {
                $this->setAffectedRows($this->getInstance()->getConnection()->changes());
            }
        }
    }

    /**
     * Binds variables to a prepared statement with specified types.
     * This method binds variables to a prepared statement based on their types,
     * allowing for more precise parameter binding.
     *
     * @param array &$preparedParams An array containing the parameters to bind.
     * @param mixed $stmt The prepared statement to bind variables to.
     * @return mixed The prepared statement with bound variables.
     */
    private function internalBindVariable(array &$preparedParams, mixed $stmt): mixed
    {
        $index = 0;
        foreach ($preparedParams as &$arg) {
            $types = match (true) {
                is_float($arg) => SQLITE3_FLOAT,
                is_integer($arg) => SQLITE3_INTEGER,
                is_string($arg) => SQLITE3_TEXT,
                is_null($arg) => SQLITE3_NULL,
                default => SQLITE3_BLOB,
            };
            call_user_func_array([$stmt, 'bindParam'], [array_keys($preparedParams)[$index], &$arg, $types]);
            $index++;
        }
        return $stmt;
    }

    /**
     * Parses an SQL statement and returns an statement.
     *
     * @param mixed ...$params The parameters for the query function.
     * @return string The statement resulting from the SQL statement.
     */
    public function parse(mixed ...$params): string
    {
        $this->setQueryString(SQL::escape(reset($params), SQL::SQL_DIALECT_DOUBLE_QUOTE));
        return $this->getQueryString();
    }

    /**
     * This function binds the parameters to a prepared statement.
     *
     * @param mixed ...$params
     * @return mixed
     */
    private function prepareStatement(mixed ...$params): mixed
    {
        $this->setAllMetadata();
        if (!empty($params)) {
            $statement = $this->getInstance()->getConnection()->prepare($this->parse(...$params));
            if ($statement) {
                $this->setStatement($statement);
            }
            return $statement;
        }
        return false;
    }

    /**
     * This function executes an SQL statement and returns the result set as a statement object.
     *
     * @param mixed $params Statement to be queried
     * @return IConnection
     */
    public function query(mixed ...$params): IConnection
    {
        if (!empty($params) && ($statement = $this->prepareStatement(...$params)) && $result = $this->exec($statement)) {
            $colCount = (is_object($result) && get_class($result) === 'SQLite3Result' && method_exists($result, 'numColumns')) ? $result->numColumns() : 0;
            if ($colCount > 0) {
                $this->setQueryColumns($colCount);
                $this->setQueryRows(
                    (function (mixed $stmt): int {
                        $results = [];
                        $rows = 0;
                        while ($row = $stmt->fetchArray(SQLITE3_ASSOC)) {
                            $results[] = $row;
                            $rows++;
                        }
                        $this->setStatement(['results' => $results]);
                        return $rows;
                    })($result) ?? 0
                );
            } else {
                $this->setAffectedRows($this->getInstance()->getConnection()->changes());
                $this->setStatement(['results' => []]);
            }
        }
        return $this->getInstance();
    }

    /**
     * This function binds the parameters to a prepared query.
     *
     * @param mixed ...$params
     * @return IConnection
     */
    public function prepare(mixed ...$params): IConnection
    {
        if (!empty($params) && ($this->prepareStatement(...$params))) {
            $bindParams = Schemas::makeArgs([$this->getStatement(), ...$params]);
            $this->bindParam($bindParams);
        }
        return $this->getInstance();
    }

    /**
     * This function runs an SQL statement and returns the number of affected rows.
     *
     * @param mixed $params Statement to be executed
     * @return SQLite3Result|false
     */
    public function exec(mixed ...$params): SQLite3Result|false
    {
        $stmt = reset($params);
        return $stmt->execute();
    }
}
