<?php

namespace GenericDatabase\Engine\PgSQL\Connection\Statements;

use GenericDatabase\Interfaces\IConnection;
use GenericDatabase\Interfaces\Connection\IStatements;
use GenericDatabase\Abstract\AbstractStatements;
use GenericDatabase\Core\Query;
use GenericDatabase\Helpers\Hash;
use GenericDatabase\Helpers\Schemas;
use GenericDatabase\Helpers\Parsers\SQL;
use GenericDatabase\Helpers\Validations;
use GenericDatabase\Engine\PgSQL\Connection\PgSQL;
use PgSql\Result;

/**
 * Concrete implementation for PgSQL database
 */
class StatementsHandler extends AbstractStatements implements IStatements
{
    /**
     * Instance of the Statement name of the database
     * @var string $stmtName = ''
     */
    private mixed $stmtName = '';

    /**
     * Returns the statement for the function.
     *
     * @return string
     */
    public function getStmtName(): string
    {
        return $this->stmtName;
    }

    /**
     * Sets the statement for the function.
     *
     * @param string $stmtName
     * @return void
     */
    public function setStmtName(string $stmtName): void
    {
        $this->stmtName = $stmtName;
    }

    /**
     * This function returns the last ID generated by an auto-increment column,
     * either the last one inserted during the current transaction, or by passing in the optional name parameter.
     *
     * @param ?string $name = null Resource name, table or view
     * @return string|int|false
     */
    public function lastInsertId(?string $name = null): string|int|false
    {
        if (!$name) {
            $result = pg_query($this->getInstance()->getConnection(), "SELECT lastval()");
            if ($result) {
                $row = pg_fetch_row($result);
                return $row ? (int) $row[0] : false;
            }
            return false;
        }
        $query = "SELECT
            current_database() as database_name,
            seq.schemaname AS schema_name,
            seq.sequencename AS name,
            table_identities.*,
            seq.last_value
        FROM pg_sequences seq
            INNER JOIN pg_namespace nspc ON nspc.nspname = seq.schemaname
            INNER JOIN pg_class s ON s.relname = seq.sequencename AND s.relnamespace = nspc.oid
            LEFT OUTER JOIN (
                SELECT
                    t.relname AS table_name,
                    a.attname AS column_name,
                    d.objid AS objid
                FROM pg_namespace tns
                    JOIN pg_class t ON tns.oid = t.relnamespace AND t.relkind IN ('p', 'r')
                    JOIN pg_index i ON t.oid = i.indrelid AND i.indisprimary
                    JOIN pg_attribute a ON i.indrelid = a.attrelid AND a.attnum = ANY (i.indkey)
                    JOIN pg_depend d ON t.oid = d.refobjid AND d.refobjsubid = a.attnum
            ) table_identities ON table_identities.objid = s.oid
        WHERE table_identities.table_name = '$name'
        AND (SELECT current_database()) = current_database()";
        $result = pg_query($this->getInstance()->getConnection(), $query);
        if ($result) {
            $row = pg_fetch_assoc($result);
            if ($row && isset($row['last_value']) && is_null($row['last_value']) && isset($row['name'])) {
                $seqName = $row['name'];
                $seqResult = pg_query_params($this->getInstance()->getConnection(), "SELECT currval($1)", [$seqName]);
                if ($seqResult) {
                    $seqRow = pg_fetch_row($seqResult);
                    return $seqRow ? (int) $seqRow[0] : false;
                }
            } elseif ($row && isset($row['last_value']) && !is_null($row['last_value'])) {
                return (int) $row['last_value'];
            }
        }
        return false;
    }

    /**
     * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
     *
     * @param mixed $params Content to be quoted
     * @return mixed
     */
    public function quote(mixed ...$params): mixed
    {
        $string = reset($params);
        $quote = $params[1] ?? false;
        if (is_array($string)) {
            return array_map(fn($str) => $this->quote($str, $quote), $string);
        } elseif ($string && preg_match("/^(?:\d+\.\d+|[1-9]\d*)$/S", (string) $string)) {
            return $string;
        }
        $quoted = fn($str) => pg_escape_string($this->getInstance()->getConnection(), (string) $str);
        return $quote ? "'" . $quoted($string) . "'" : $quoted($string);
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    public function bindParam(object $params): void
    {
        $this->setQueryParameters($params->query->arguments);
        if ($params->by->array) {
            $this->internalBindParamArray($params);
        } else {
            $this->internalBindParamArgs($params);
        }
    }

    /**
     * Binds an array parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArray(object $params): void
    {
        if ($params->is->array->multi) {
            $this->internalBindParamArrayMulti($params);
        } else {
            $this->internalBindParamArraySingle($params);
        }
    }

    /**
     * Binds an array multiple parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArrayMulti(object $params): void
    {
        $affectedRows = 0;
        foreach ($params->query->arguments as $argument) {
            $this->internalBindVariable($argument);
            if ($this->exec($this->getStmtName(), array_values($argument))) {
                if ($this->getQueryColumns() === 0) {
                    $affectedRows++;
                    $this->setAffectedRows($affectedRows);
                }
            }
        }
    }

    /**
     * Binds an array single parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArraySingle(object $params): void
    {
        $this->internalBindParamArgs($params);
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an args of parameters and values.
     * @return void
     */
    private function internalBindParamArgs(object $params): void
    {
        $this->internalBindVariable($params->query->arguments);
        if ($result = $this->exec($this->getStmtName(), array_values($params->query->arguments))) {
            $colCount = pg_num_fields($result);
            if ($colCount > 0) {
                $this->setQueryColumns($colCount);
                $this->setQueryRows(
                    (function (mixed $result): int {
                        $results = [];
                        $rows = 0;
                        while ($row = pg_fetch_array($result, null, PGSQL_ASSOC)) {
                            $results[] = $row;
                            $rows++;
                        }
                        $this->setStatement(['results' => $results]);
                        return $rows;
                    })($result)
                );
            } else {
                $this->setStatement(['results' => []]);
                $this->setAffectedRows(pg_affected_rows($result));
            }
            pg_free_result($result);
        }
    }

    /**
     * Binds variables to a prepared statement with specified types.
     * This method binds variables to a prepared statement based on their types,
     * allowing for more precise parameter binding.
     *
     * @param mixed $preparedParams The prepared statement to bind variables to.
     * @return void The prepared statement with bound variables.
     */
    private static function internalBindVariable(mixed $preparedParams): void
    {
        Validations::detectTypes($preparedParams);
    }

    /**
     * Parses an SQL statement and returns an statement.
     *
     * @param mixed ...$params The parameters for the query function.
     * @return string The statement resulting from the SQL statement.
     */
    public function parse(mixed ...$params): string
    {
        $this->setQueryString(SQL::binding(SQL::escape(reset($params), SQL::SQL_DIALECT_DOUBLE_QUOTE), SQL::BIND_DOLLAR_SIGN));
        return $this->getQueryString();
    }

    /**
     * This function binds the parameters to a prepared statement.
     *
     * @param mixed ...$params
     * @return mixed
     */
    private function prepareStatement(mixed ...$params): mixed
    {
        $report = $this->getOptionsHandler()->getOptions(PgSQL::ATTR_REPORT);
        if (!empty($report) || !is_null($report)) {
            $reportHandler = $this->getReportHandler();
            $reportHandler->setReportMode($report);
        }

        $this->setAllMetadata();
        if (!empty($params)) {
            $this->setStmtName(Hash::hash());
            if (reset($params)[1] === Query::RAW) {
                $statement = pg_query($this->getInstance()->getConnection(), $this->parse(reset($params)[0]));
            } else {
                $statement = pg_prepare($this->getInstance()->getConnection(), $this->getStmtName(), $this->parse(reset($params)[0]));
            }
            if ($statement) {
                $this->setStatement($statement);
            }
            return $statement;
        }
        return false;
    }

    /**
     * This function executes an SQL statement and returns the result set as a statement object.
     *
     * @param mixed $params Statement to be queried
     * @return IConnection
     */
    public function query(mixed ...$params): IConnection
    {
        if (!empty($params) && ($statement = $this->prepareStatement([...$params, Query::RAW]))) {
            $colCount = pg_num_fields($statement);
            if ($colCount > 0) {
                $cloneStmt = function () use ($statement, $params): mixed {
                    if ($statement instanceof Result) {
                        return false;
                    }
                    return $this->prepareStatement([...$params, Query::RAW]);
                };
                $countResult = $cloneStmt();
                if ($countResult) {
                    $rowCount = 0;
                    while (pg_fetch_array($countResult, null, PGSQL_ASSOC)) {
                        $rowCount++;
                    }
                    $this->setQueryRows($rowCount);
                }
                $this->setQueryColumns($colCount);
                $this->setStatement($statement);
            } else {
                $this->setStatement(['results' => []]);
                $this->setAffectedRows(pg_affected_rows($statement));
            }
        }
        return $this->getInstance();
    }

    /**
     * This function binds the parameters to a prepared query.
     *
     * @param mixed ...$params
     * @return IConnection
     */
    public function prepare(mixed ...$params): IConnection
    {
        if (!empty($params) && ($this->prepareStatement([...$params, Query::PREPARED]))) {
            $bindParams = Schemas::makeArgs([$this->getStatement(), ...$params, $this->getStmtName()]);
            $this->bindParam($bindParams);
        }
        return $this->getInstance();
    }

    /**
     * This function runs an SQL statement and returns the number of affected rows.
     *
     * @param mixed $params Statement to be executed
     * @return mixed
     */
    public function exec(mixed ...$params): mixed
    {
        $statement = reset($params);
        $data = $params[1] ?? false;
        if (!is_array($data)) {
            $data = [];
        }
        $processedData = array_values($data);
        return call_user_func_array('pg_execute', [$this->getInstance()->getConnection(), $statement, $processedData]);
    }
}
