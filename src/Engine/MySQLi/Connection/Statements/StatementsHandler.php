<?php

namespace GenericDatabase\Engine\MySQLi\Connection\Statements;

use mysqli_stmt;
use GenericDatabase\Helpers\Schemas;
use GenericDatabase\Helpers\Parsers\SQL;
use GenericDatabase\Interfaces\IConnection;
use GenericDatabase\Abstract\AbstractStatements;
use GenericDatabase\Engine\MySQLi\Connection\MySQL;
use GenericDatabase\Interfaces\Connection\IStatements;

/**
 * Concrete implementation for MySQLi database
 */
class StatementsHandler extends AbstractStatements implements IStatements
{
    /**
     * This function returns the last ID generated by an auto-increment column,
     * either the last one inserted during the current transaction, or by passing in the optional name parameter.
     *
     * @param ?string $name = null Resource name, table or view
     * @return string|int|false
     */
    public function lastInsertId(?string $name = null): string|int|false
    {
        if (!$name) {
            return (int) $this->getInstance()->getConnection()->insert_id;
        }
        $filter = "WHERE TABLE_NAME = ? AND COLUMN_KEY = ? AND EXTRA = ?";
        $query = sprintf("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS %s", $filter);
        $stmt = $this->getInstance()->getConnection()->prepare($query);
        $stmt = self::internalBindVariable([$name, 'PRI', 'auto_increment'], $stmt);
        $stmt->execute();
        $autoKeyResult = $stmt->get_result();
        $autoKey = $autoKeyResult->fetch_assoc();
        if (isset($autoKey['COLUMN_NAME'])) {
            $query = sprintf("SELECT MAX(%s) AS value FROM %s", $autoKey['COLUMN_NAME'], $name);
            $stmt = $this->getInstance()->getConnection()->prepare($query);
            $stmt->execute();
            $maxIndexResult = $stmt->get_result();
            $maxIndex = $maxIndexResult->fetch_assoc()['value'];
            if ($maxIndex !== null) {
                return (int) $maxIndex;
            }
        }
        return (int) $autoKey['COLUMN_NAME'] ?? 0;
    }

    /**
     * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
     *
     * @param mixed $params Content to be quoted
     * @return mixed
     */
    public function quote(mixed ...$params): mixed
    {
        $string = reset($params);
        $quote = $params[1] ?? false;
        if (is_array($string)) {
            return array_map(fn($str) => $this->quote($str, $quote), $string);
        } elseif ($string && preg_match("/^(?:\d+\.\d+|[1-9]\d*)$/S", (string) $string)) {
            return $string;
        }
        $quoted = fn($str) => $this->getInstance()->getConnection()->real_escape_string($str);
        return $quote ? "'" . $quoted($string) . "'" : $quoted($string);
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    public function bindParam(object $params): void
    {
        $this->setQueryParameters($params->query->arguments);
        if ($params->by->array) {
            $this->internalBindParamArray($params);
        } else {
            $this->internalBindParamArgs($params);
        }
        $this->setQueryColumns((int) $this->getStatement()->field_count);
    }

    /**
     * Binds an array parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArray(object $params): void
    {
        if ($params->is->array->multi) {
            $this->internalBindParamArrayMulti($params);
        } else {
            $this->internalBindParamArraySingle($params);
        }
    }

    /**
     * Binds an array multiple parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArrayMulti(object $params): void
    {
        $affectedRows = 0;
        foreach ($params->query->arguments as $argument) {
            $this->setStatement($this->internalBindVariable($argument, $params->statement->object));
            if ($this->exec($this->getStatement())) {
                if ($this->getQueryColumns() === 0) {
                    $affectedRows++;
                    $this->setAffectedRows((int) $affectedRows);
                }
            }
        }
    }

    /**
     * Binds an array single parameter to a variable in the SQL statement.
     *
     * @param mixed $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArraySingle(object $params): void
    {
        $this->internalBindParamArgs($params);
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an args of parameters and values.
     * @return void
     */
    private function internalBindParamArgs(object $params): void
    {
        $this->setStatement(@$this->internalBindVariable($params->query->arguments, $params->statement->object));
        if ($this->exec($this->getStatement())) {
            if ($this->getStatement()->field_count > 0) {
                $result = $this->getStatement()->get_result();
                if ($result) {
                    $this->setStatement($result);
                    $this->setQueryRows((int) $result->num_rows);
                }
            } else {
                $this->setAffectedRows($this->getStatement()->affected_rows);
            }
        }
    }

    /**
     * Binds variables to a prepared statement with specified types.
     * This method binds variables to a prepared statement based on their types,
     * allowing for more precise parameter binding.
     *
     * @param array &$preparedParams An array containing the parameters to bind.
     * @param mysqli_stmt $statement The prepared statement to bind variables to.
     * @return mysqli_stmt The prepared statement with bound variables.
     */
    private static function internalBindVariable(array $preparedParams, mysqli_stmt $statement): mysqli_stmt
    {
        $types = '';
        $values = [];
        foreach ($preparedParams as $value) {
            if (is_int($value)) {
                $types .= 'i';
            } elseif (is_float($value)) {
                $types .= 'd';
            } elseif (is_string($value)) {
                $types .= 's';
            } else {
                $types .= 'b';
            }
            $values[] = $value;
        }
        if (!empty($types)) {
            $valueArray = array_values($values);
            $statement->bind_param($types, ...$valueArray);
        }
        return $statement;
    }

    /**
     * Parses an SQL statement and returns an statement.
     *
     * @param mixed ...$params The parameters for the query function.
     * @return string The statement resulting from the SQL statement.
     */
    public function parse(mixed ...$params): string
    {
        $this->setQueryString(SQL::binding(SQL::escape(reset($params), SQL::SQL_DIALECT_BACKTICK)));
        return $this->getQueryString();
    }

    /**
     * This function binds the parameters to a prepared statement.
     *
     * @param mixed ...$params
     * @return mixed
     */
    private function prepareStatement(mixed ...$params): mixed
    {
        $report = $this->getOptionsHandler()->getOptions(MySQL::ATTR_REPORT);
        if (!empty($report) || !is_null($report)) {
            $reportHandler = $this->getReportHandler();
            $reportHandler->setReportMode($report);
        }

        $this->setAllMetadata();
        if (!empty($params)) {
            $statement = $this->getInstance()->getConnection()->prepare($this->parse(...$params));
            if ($statement) {
                $this->setStatement($statement);
            }
            return $statement;
        }
        return false;
    }

    /**
     * This function executes an SQL statement and returns the result set as a statement object.
     *
     * @param mixed $params Statement to be queried
     * @return IConnection
     */
    public function query(mixed ...$params): IConnection
    {
        if (!empty($params) && ($statement = $this->prepareStatement(...$params)) && $this->exec($statement)) {
            $colCount = $statement->field_count;
            if ($colCount > 0) {
                $this->setQueryColumns($colCount);
                $this->setQueryRows(
                    (function (mixed $stmt): int {
                        $result = $stmt->get_result();
                        if (!$result) {
                            return 0;
                        }
                        $results = $result->fetch_all(MYSQLI_ASSOC);
                        $this->setStatement(['results' => $results]);
                        return $result->num_rows;
                    })($statement) ?? 0
                );
            } else {
                $this->setStatement(['results' => []]);
                $this->setAffectedRows((int) $statement->affected_rows);
            }
        }
        return $this->getInstance();
    }

    /**
     * This function binds the parameters to a prepared query.
     *
     * @param mixed ...$params
     * @return IConnection
     */
    public function prepare(mixed ...$params): IConnection
    {
        if (!empty($params) && ($this->prepareStatement(...$params))) {
            $bindParams = Schemas::makeArgs([$this->getStatement(), ...$params]);
            $this->bindParam($bindParams);
        }
        return $this->getInstance();
    }

    /**
     * This function runs an SQL statement and returns the number of affected rows.
     *
     * @param mixed $params Statement to be executed
     * @return mixed
     */
    public function exec(mixed ...$params): mixed
    {
        $stmt = reset($params);
        return $stmt->execute();
    }
}
