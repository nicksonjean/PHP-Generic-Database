<?php

declare(strict_types=1);

namespace GenericDatabase\Engine;

use
  GenericDatabase\iConnection,
  GenericDatabase\Traits\Errors,
  GenericDatabase\Traits\Caller,
  GenericDatabase\Traits\Cleaner,
  GenericDatabase\Traits\Singleton,
  GenericDatabase\Engine\SQLite3\Arguments,
  GenericDatabase\Engine\SQLite3\Options,
  GenericDatabase\Engine\SQLite3\Attributes,
  GenericDatabase\Engine\SQLite3\DSN,
  GenericDatabase\Engine\SQLite3\SQLite,
  GenericDatabase\Engine\SQLite3\Dump,
  GenericDatabase\Engine\SQLite3\Transaction;

class SQLite3Engine implements iConnection
{
  use Errors, Caller, Cleaner, Singleton;

  private $connection;

  /**
   * This method is responsible for call the static instance to Arguments class with a Magic Method __call and __callStatic.
   * 
   * @param string $method
   * @param array $arguments
   * @return SQLite3Engine
   */
  private static function call(string $method, array $arguments): SQLite3Engine
  {
    return Arguments::call($method, $arguments);
  }

  /**
   * This method is responsible for prepare the connection options before connect.
   * 
   * @return SQLite3Engine
   */
  private function preConnect(): SQLite3Engine
  {
    Options::setOptions($this->getOptions());
    $options = [];
    $options = Options::getOptions();
    $this->setOptions($options);
    return $this;
  }

  /**
   * This method is responsible for update in date late binding the connection.
   * 
   * @return SQLite3Engine
   */
  private function postConnect(): SQLite3Engine
  {
    Options::define();
    Attributes::define();
    return $this;
  }

  /**
   * This method is responsible for creating a new instance of the SQLite3Engine connection.
   * 
   * @param string $dsn
   * @return SQLite3Engine 
   */
  private function realConnect(string $database, int $flags = null): SQLite3Engine
  {
    if (!$flags) {
      $flags = SQLITE3_OPEN_READWRITE | SQLITE3_OPEN_CREATE;
    }

    $this->setConnection(new \SQLite3($database, $flags));
    return $this;
  }

  /**
   * This method is used to establish a database connection and set the connection instance
   * 
   * @return SQLite3Engine
   */
  public function connect(): SQLite3Engine
  {
    try {
      $this
        ->preConnect()
        ->setInstance($this)
        ->setDsn($this->parseDsn())
        ->realConnect($this->getDatabase(), Options::flags())
        ->postConnect()
        ->setConnected(true);
      return $this;
    } catch (\Exception $error) {
      $this->setConnected(false);
      Errors::throw($error);
    }
  }

  /**
   * This method is responsible for parsing the DSN from DSN class.
   * 
   * @return string|\Exception
   */
  private function parseDsn(): string|\Exception
  {
    return DSN::parseDsn();
  }

  /**
   * This method is used to get the database connection instance
   * 
   * @return mixed
   */
  public function getConnection(): mixed
  {
    return $this->connection;
  }

  /**
   * This method is used to assign the database connection instance
   * 
   * @param mixed $connection
   * @return mixed
   */
  public function setConnection(mixed $connection): mixed
  {
    $this->connection = $connection;
    return $this->connection;
  }

  /**
   * Import SQL dump from file - extremely fast.
   * 
   * @param string $file 
   * @param string $delimiter = ';'
   * @param array<callable(int, ?float): void> $onProgress = null
   * @return int
   */
  public function loadFromFile(string $file, string $delimiter = ';', ?callable $onProgress = null): int
  {
    return Dump::loadFromFile($file, $delimiter, $onProgress);
  }

  /**
   * This function creates a new transaction, in order to be able to commit or rollback changes made to the database.
   * 
   * @return bool
   */
  public function beginTransaction(): bool
  {
    return Transaction::beginTransaction();
  }

  /**
   * This function commits any changes made to the database during this transaction.
   * 
   * @return bool
   */
  public function commit(): bool
  {
    return Transaction::commit();
  }

  /**
   * This function rolls back any changes made to the database during this transaction and restores the data to its original state.
   * 
   * @return bool
   */
  public function rollback(): bool
  {
    return Transaction::rollback();
  }

  /**
   * This function returns the last ID generated by an auto-increment column, either the last one inserted during the current transaction, or by passing in the optional name parameter.
   * 
   * @return bool
   */
  public function inTransaction(): bool
  {
    return Transaction::inTransaction();
  }

  /**
   * This function returns the last ID generated by an auto-increment column, either the last one inserted during the current transaction, or by passing in the optional name parameter.
   * 
   * @param ?string $name = null
   * @return string|int|false
   */
  public function lastInsertId(?string $name = null): string|int|false
  {
    return $this->getInstance()->getConnection()->lastInsertRowID();
  }

  /**
   * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
   * 
   * @param mixed $params
   * @return mixed
   */
  public function quote(mixed ...$params): mixed
  {
    $string = $params[0];
    $quoted = function ($string) {
      return str_replace("'", "''", $string);
    };

    if (is_int($string)) {
      return $string;
    } elseif (is_float($string)) {
      return "'" . $quoted(str_replace(',', '.', strval(floatval($string)))) . "'";
    } elseif (is_bool($string)) {
      return $string ? '1' : '0';
    } elseif (is_null($string)) {
      return 'NULL';
    } else {
      return "'" . $quoted($string) . "'";
    }
  }

  /**
   * This function prepares an SQL statement for execution and returns a statement object.
   * 
   * @param mixed $params
   * @return mixed
   */
  public function prepare(mixed ...$params): mixed
  {
    $query = $params[0];
    return $this->getInstance()->getConnection()->prepare($query);
  }

  /**
   * This function executes an SQL statement and returns the result set as a statement object.
   * 
   * @param mixed $params
   * @return mixed
   */
  public function query(mixed ...$params): mixed
  {
    $query = $params[0];
    return $this->getInstance()->getConnection()->query($query);
  }

  /**
   * This function runs an SQL statement and returns the number of affected rows.
   * 
   * @param mixed $params
   * @return mixed
   */
  public function exec(mixed ...$params): mixed
  {
    $query = $params[0];
    return $this->getInstance()->getConnection()->exec($query);
  }

  /**
   * This function retrieves an attribute from the database.
   * 
   * @param int $attribute
   * @return mixed
   */
  public function getAttribute($name)
  {
    return SQLite::getAttribute($name);
  }

  /**
   * This function returns an array containing error information about the last operation performed by the database.
   * 
   * @return string
   */
  public function setAttribute($name, $value)
  {
    return SQLite::setAttribute($name, $value);
  }

  /**
   * This function returns an SQLSTATE code for the last operation executed by the database.
   * 
   * @param ?int $inst = null
   * @return int
   */
  public function errorCode(?int $inst = null): int
  {
    return $this->getInstance()->getConnection()->lastErrorCode();
  }

  /**
   * This function returns an array containing error information about the last operation performed by the database.
   * 
   * @param ?int $inst = null
   * @return string
   */
  public function errorInfo(?int $inst = null): string
  {
    return $this->getInstance()->getConnection()->lastErrorMsg();
  }
}
