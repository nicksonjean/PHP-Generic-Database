<?php

namespace GenericDatabase\Engine\OCI\Connection\Statements;

use GenericDatabase\Interfaces\IConnection;
use GenericDatabase\Interfaces\Statements\IStatements;
use GenericDatabase\Abstract\Statements\AbstractStatements;
use GenericDatabase\Helpers\Schemas;
use GenericDatabase\Helpers\Parsers\SQL;

/**
 * Concrete implementation for OCI database
 */
class StatementsHandler extends AbstractStatements implements IStatements
{
    /**
     * This function returns the last ID generated by an auto-increment column,
     * either the last one inserted during the current transaction, or by passing in the optional name parameter.
     *
     * @param ?string $name = null Resource name, table or view
     * @return string|int|false
     */
    public function lastInsertId(?string $name = null): string|int|false
    {
        if ($name !== null) {
            $filter = "WHERE OWNER = USER AND identity_column = 'YES' AND TABLE_NAME = :tableName";
            $query = sprintf("SELECT data_default AS sequence_val, table_name, column_name FROM all_tab_columns %s", $filter);
            $stmt = oci_parse($this->getInstance()->getConnection(), $query);
            oci_bind_by_name($stmt, ":tableName", $name);
            if (oci_execute($stmt)) {
                $row = oci_fetch_array($stmt, OCI_ASSOC);
                if ($row) {
                    $sequenceVal = $row['SEQUENCE_VAL'];
                    $sequenceVal = str_replace('.nextval', '.currval', $sequenceVal);
                    $sequenceVal = str_replace('"', '', $sequenceVal);
                    $query = "SELECT $sequenceVal FROM DUAL";
                    $statement = oci_parse($this->getInstance()->getConnection(), $query);
                    if ($statement && oci_execute($statement)) {
                        $row = oci_fetch_array($statement, OCI_NUM);
                        return $row ? (int) $row[0] : false;
                    }
                }
            }
        }
        return false;
    }

    /**
     * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
     *
     * @param mixed $params Content to be quoted
     * @return mixed
     */
    public function quote(mixed ...$params): mixed
    {
        $string = reset($params);
        return match (true) {
            is_int($string) => $string,
            is_float($string) => "'" . str_replace(',', '.', strval($string)) . "'",
            is_bool($string) => $string ? '1' : '0',
            is_null($string) => 'NULL',
            default => "'" . str_replace("'", "''", (string) $string) . "'",
        };
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    public function bindParam(object $params): void
    {
        $this->setQueryParameters($params->query->arguments);
        if ($params->by->array) {
            $this->internalBindParamArray($params);
        } else {
            $this->internalBindParamArgs($params);
        }
        $this->setQueryColumns((int) oci_num_fields($params->statement->object));
    }

    /**
     * Binds an array parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArray(object $params): void
    {
        if ($params->is->array->multi) {
            $this->internalBindParamArrayMulti($params);
        } else {
            $this->internalBindParamArraySingle($params);
        }
    }

    /**
     * Binds an array multiple parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArrayMulti(object $params): void
    {
        $affectedRows = 0;
        foreach ($params->query->arguments as $param) {
            $this->setStatement($this->internalBindVariable($param, $params->statement->object));
            if ($this->exec($this->getStatement())) {
                if ($this->getQueryColumns() === 0) {
                    $affectedRows++;
                    $this->setAffectedRows((int) $affectedRows);
                }
            }
        }
    }

    /**
     * Binds an array single parameter to a variable in the SQL statement.
     *
     * @param mixed $params The name of the parameter or an array of parameters and values.
     * @return void
     */
    private function internalBindParamArraySingle(object $params): void
    {
        $this->internalBindParamArgs($params);
    }

    /**
     * Binds a parameter to a variable in the SQL statement.
     *
     * @param object $params The name of the parameter or an args of parameters and values.
     * @return void
     */
    private function internalBindParamArgs(object $params): void
    {
        $this->setStatement($this->internalBindVariable($params->query->arguments, $params->statement->object));
        if ($this->exec($this->getStatement())) {
            if ((int) oci_num_fields($this->getStatement()) > 0) {
                $this->setQueryRows(
                    (function (mixed $stmt): int {
                        $results = [];
                        $rows = 0;
                        while ($row = oci_fetch_array($stmt, OCI_ASSOC + OCI_RETURN_NULLS)) {
                            $results[] = $row;
                            $rows++;
                        }
                        $this->setStatement(['results' => $results]);
                        return $rows;
                    })($this->getStatement()) ?? 0
                );
            } else {
                $this->setAffectedRows((int) oci_num_rows($this->getStatement()));
            }
        }
    }

    /**
     * Binds variables to a prepared statement with specified types.
     * This method binds variables to a prepared statement based on their types,
     * allowing for more precise parameter binding.
     *
     * @param mixed $statement An array containing the parameters to bind.
     * @param mixed $param The prepared statement to bind variables to.
     * @param mixed $value The prepared statement to bind variables to.
     * @return mixed
     */
    private static function internalBindVariable(array $params, mixed $statement): mixed
    {
        foreach ($params as $key => $value) {
            oci_bind_by_name($statement, $key, $params[$key]);
        }
        return $statement;
    }

    /**
     * Parses an SQL statement and returns an statement.
     *
     * @param mixed ...$params The parameters for the query function.
     * @return string The statement resulting from the SQL statement.
     */
    public function parse(mixed ...$params): string
    {
        $this->setQueryString(SQL::escape(reset($params), SQL::SQL_DIALECT_DOUBLE_QUOTE));
        return $this->getQueryString();
    }

    /**
     * This function binds the parameters to a prepared statement.
     *
     * @param mixed ...$params
     * @return mixed
     */
    private function prepareStatement(mixed ...$params): mixed
    {
        $this->setAllMetadata();
        if (!empty($params)) {
            $statement = oci_parse($this->getInstance()->getConnection(), $this->parse(...$params));
            if ($statement) {
                $this->setStatement($statement);
            }
            return $statement;
        }
        return false;
    }

    /**
     * This function executes an SQL statement and returns the result set as a statement object.
     *
     * @param mixed $params Statement to be queried
     * @return IConnection
     */
    public function query(mixed ...$params): IConnection
    {
        if (!empty($params) && ($statement = $this->prepareStatement(...$params)) && $this->exec($statement)) {
            $colCount = is_resource($statement) ? oci_num_fields($statement) : 0;
            if ($colCount > 0) {
                $this->setQueryColumns($colCount);
                $this->setQueryRows(
                    (function (mixed $stmt): int {
                        $results = [];
                        $rows = 0;
                        while ($row = oci_fetch_array($stmt, OCI_ASSOC + OCI_RETURN_NULLS)) {
                            $results[] = $row;
                            $rows++;
                        }
                        $this->setStatement(['results' => $results, 'statement' => $stmt]);
                        return $rows;
                    })($statement) ?? 0
                );
            } else {
                $this->setAffectedRows(oci_num_rows($statement));
                $this->setStatement(['results' => []]);
            }
        }
        return $this->getInstance();
    }

    /**
     * This function binds the parameters to a prepared query.
     *
     * @param mixed ...$params
     * @return IConnection
     */
    public function prepare(mixed ...$params): IConnection
    {
        if (!empty($params) && ($this->prepareStatement(...$params))) {
            $bindParams = Schemas::makeArgs([$this->getStatement(), ...$params]);
            $this->bindParam($bindParams);
        }
        return $this->getInstance();
    }

    /**
     * This function runs an SQL statement and returns the number of affected rows.
     *
     * @param mixed $params Statement to be executed
     * @return mixed
     */
    public function exec(mixed ...$params): mixed
    {
        $statement = reset($params);
        $data = $params[1] ?? false;
        if (!is_array($data)) {
            $data = [];
        }
        return call_user_func_array('oci_execute', [$statement, OCI_COMMIT_ON_SUCCESS]);
    }
}
