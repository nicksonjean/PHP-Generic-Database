<?php

namespace GenericDatabase\Engine;

use
  GenericDatabase\Traits\Errors,
  GenericDatabase\Traits\Caller,
  GenericDatabase\Traits\Cleaner,
  GenericDatabase\Traits\Singleton,
  GenericDatabase\Engine\MySQLi\Arguments,
  GenericDatabase\Engine\MySQLi\Options,
  GenericDatabase\Engine\MySQLi\Attributes,
  GenericDatabase\Engine\MySQLi\DSN,
  GenericDatabase\Engine\MySQli\MySQL,
  GenericDatabase\Engine\MySQLi\Dump,
  GenericDatabase\Engine\MySQLi\Transaction;

class MySQLiEngine
{
  use Errors, Caller, Cleaner, Singleton;

  /**
   * This method is responsible for call the static instance to Arguments class with a Magic Method __call and __callStatic.
   * 
   * @param string $method
   * @param array $arguments
   * @return MySQLiEngine
   */
  private static function call(string $method, array $arguments): MySQLiEngine
  {
    return Arguments::call($method, $arguments);
  }

  /**
   * This method is responsible for prepare the connection options before connect.
   * 
   * @return MySQLiEngine
   */
  private function preConnect(): MySQLiEngine
  {
    $this->setConnection(mysqli_init());
    Options::setOptions($this->getOptions());
    $options = [];
    $options = Options::getOptions();
    $this->setOptions($options);
    return $this;
  }

  /**
   * This method is responsible for update in date late binding the connection.
   * 
   * @return MySQLiEngine
   */
  private function postConnect(): MySQLiEngine
  {
    Options::define();
    Attributes::define();
    return $this;
  }

  /**
   * This method is responsible for creating a new instance of the MySQLi connection.
   * 
   * @param string|null $host
   * @param string $user
   * @param string|null $password
   * @param string $database
   * @param int $port
   * @return PDOEngine 
   */
  private function realConnect(string $host = null, string $user, string $password = null, string $database, int $port): MySQLiEngine
  {
    $host = (string) !Options::getOptions(MySQL::ATTR_PERSISTENT) ? $host : 'p:' . $host;
    $this->setHost($host);
    $this->parseDns();
    $this->getConnection()->real_connect($host, $user, $password, $database, $port);
    return $this;
  }

  /**
   * This method is used to establish a database connection and set the connection instance
   * 
   * @return MySQLiEngine
   */
  public function connect(): MySQLiEngine
  {
    try {
      $this
        ->preConnect()
        ->setInstance($this)
        ->realConnect($this->getHost(), $this->getUser(), $this->getPassword(), $this->getDatabase(), $this->getPort())
        ->postConnect()
        ->setConnected(true);
      return $this;
    } catch (\Exception $error) {
      $this->setConnected(false);
      Errors::throw($error);
    }
  }

  /**
   * This method is responsible for parsing the DSN from DSN class.
   * 
   * @return string|\Exception
   */
  private function parseDns(): string|\Exception
  {
    return DSN::parseDns();
  }

  /**
   * This method is used to get the database connection instance
   * 
   * @return \MySQLi
   */
  public function getConnection(): \MySQLi
  {
    return $GLOBALS['connection'];
  }

  /**
   * This method is used to assign the database connection instance
   * 
   * @param \MySQLi $connection
   * @return \MySQLi
   */
  public function setConnection(\MySQLi $connection): \MySQLi
  {
    return $GLOBALS['connection'] = $connection;
  }

  /**
   * Import SQL dump from file - extremely fast.
   * 
   * @param string $file 
   * @param string $delimiter = ';'
   * @param array<callable(int, ?float): void> $onProgress = null
   * @return int
   */
  public function loadFromFile(string $file, string $delimiter = ';', ?callable $onProgress = null): int
  {
    return Dump::loadFromFile($file, $delimiter, $onProgress);
  }

  /**
   * This function creates a new transaction, in order to be able to commit or rollback changes made to the database.
   * 
   * @return bool
   */
  public function beginTransaction(): bool
  {
    return Transaction::beginTransaction();
  }

  /**
   * This function commits any changes made to the database during this transaction.
   * 
   * @return bool
   */
  public function commit(): bool
  {
    return Transaction::commit();
  }

  /**
   * This function rolls back any changes made to the database during this transaction and restores the data to its original state.
   * 
   * @return bool
   */
  public function rollback(): bool
  {
    return Transaction::rollback();
  }

  /**
   * This function returns the last ID generated by an auto-increment column, either the last one inserted during the current transaction, or by passing in the optional name parameter.
   * 
   * @return bool
   */
  public function inTransaction(): bool
  {
    return Transaction::inTransaction();
  }

  /**
   * This function returns the last ID generated by an auto-increment column, either the last one inserted during the current transaction, or by passing in the optional name parameter.
   * 
   * @param ?string $name = null
   * @return string|false
   */
  public function lastInsertId(?string $name = null): string | false
  {
    if (!$name) {
      return $this->getInstance()->getConnection()->insert_id;
    } else {
      $autoKey = $this->query(vsprintf("SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = '%s' AND column_key = '%s' AND extra = '%s';", [$name, 'PRI', 'auto_increment']))->fetch_assoc();
      if (isset($autoKey['column_name'])) {
        $maxIndex = $this->query(vsprintf("SELECT COALESCE(MAX(%s)) AS value FROM %s;", [$autoKey['column_name'], $name]))->fetch_assoc();
        return $maxIndex['value'];
      } else {
        return 0;
      }
    }
  }

  /**
   * This function quotes a string for use in an SQL statement and escapes special characters (such as quotes).
   * 
   * @param mixed $string
   * @param ?bool $quote = false
   * @return string|array|false
   */
  public function quote(mixed $string, ?bool $quote = false): string | array | false
  {
    if (is_array($string))
      return array_map([get_called_class(), 'quote'], $string, array_fill(0, count($string), $quote));
    elseif ($string && preg_match("/^(?:\d+\.\d+|[1-9]\d*)$/S", $string))
      return $string;

    $quoted = function ($string, $quote) {
      $val = $this->getInstance()->getConnection()->real_escape_string($string);
      return ($quote) ? "'$val'" : $val;
    };
    return $quoted($string, $quote);
  }

  /**
   * This function prepares an SQL statement for execution and returns a statement object.
   * 
   * @param string $query
   * @param ?array $options
   * @return \mysqli_stmt|false
   */
  public function prepare(string $query): \mysqli_stmt|false
  {
    return $this->getInstance()->getConnection()->prepare($query);
  }

  /**
   * This function executes an SQL statement and returns the result set as a statement object.
   * 
   * @param string $query
   * @param ?int $result_mode = MYSQLI_STORE_RESULT
   * @return \mysqli_result|bool
   */
  public function query(string $query, ?int $result_mode = MYSQLI_STORE_RESULT): \mysqli_result|bool
  {
    return $this->getInstance()->getConnection()->query($query, $result_mode);
  }

  /**
   * This function runs an SQL statement and returns the number of affected rows.
   * 
   * @param string $statement
   * @param ?array $params = null
   * @return \mysqli_result|bool
   */
  public function exec(string $query, ?array $params = null): \mysqli_result|bool
  {
    return $this->getInstance()->getConnection()->execute_query($query, $params);
  }

  /**
   * This function retrieves an attribute from the database.
   * 
   * @param int $attribute
   * @return mixed
   */
  public function getAttribute($name)
  {
    return MySQL::getAttribute($name);
  }

  /**
   * This function sets an attribute on the database.
   * 
   * @param int $attribute
   * @param string $value
   * @return mixed
   */
  public function setAttribute($name, $value)
  {
    return MySQL::setAttribute($name, $value);
  }

  /**
   * This function returns an SQLSTATE code for the last operation executed by the database.
   * 
   * @return int
   */
  public function errorCode(): int
  {
    return $this->getInstance()->getConnection()->errno;
  }

  /**
   * This function returns an array containing error information about the last operation performed by the database.
   * 
   * @return string
   */
  public function errorInfo(): string
  {
    return $this->getInstance()->getConnection()->error;
  }
}
